{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","Cell_Cell","key","flipCellsAround","makeTable","defaultProps","App","Board_Board","ReactDOM","render","App_App","document","getElementById"],"mappings":"qTAiBqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GAEVP,KAAKJ,MAAMY,qDAIX,IAAIC,EAAU,QAAUT,KAAKJ,MAAMc,MAAQ,YAAc,IAEzD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAASf,KAAKI,qBAfZY,cCabC,qBAOnB,SAAAA,EAAYrB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACjBpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,KAAMJ,KACDsB,MAAQ,CACXC,QAAQ,EACRC,MAAOvB,EAAKwB,eAJGxB,6EAYjB,IAFA,IAAIuB,EAAQ,GAEHE,EAAI,EAAGA,EAAItB,KAAKJ,MAAM2B,MAAOD,IAAM,CAE1C,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIzB,KAAKJ,MAAM8B,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAW7B,KAAKJ,MAAMkC,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,0CAIOW,GAAO,IAAAC,EACEhC,KAAKJ,MAAtB8B,EADeM,EACfN,MAAOH,EADQS,EACRT,MACTH,EAAQpB,KAAKkB,MAAME,MAFFa,EAGRF,EAAMG,MAAM,KAAKC,IAAIC,QAHbC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAmC,EAAA,GAGhBX,EAHgBe,EAAA,GAGbZ,EAHaY,EAAA,GAMrB,SAASE,EAASjB,EAAGG,GAEfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAK5Bc,EAASjB,EAAGG,GACZc,EAASjB,EAAGG,EAAI,GAChBc,EAASjB,EAAGG,EAAI,GAChBc,EAASjB,EAAI,EAAIG,GACjBc,EAASjB,EAAI,EAAIG,GAGjB,IAAIN,EAASC,EAAMoB,MAAM,SAAAhB,GAAG,OAAIA,EAAIgB,MAAM,SAAAC,GAAI,OAAKA,MAEnDzC,KAAK0C,SAAS,CAACtB,MAAOA,EAAOD,OAAQA,wCAMrC,IAHU,IAAAwB,EAAA3C,KACN4C,EAAW,GAENtB,EAAI,EAAGA,EAAItB,KAAKJ,MAAM2B,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GAD+BqB,EAAA,SAEhCpB,GACP,IAAIM,EAAK,GAAAe,OAAMxB,EAAN,KAAAwB,OAAWrB,GACpBD,EAAIG,KACFhB,EAAAC,EAAAC,cAACkC,EAAD,CACEC,IAAKjB,EACLrB,MAAOiC,EAAKzB,MAAME,MAAME,GAAGG,GAC3BjB,kBAAmB,kBAAMmC,EAAKM,gBAAgBlB,QAN3CN,EAAI,EAAGA,EAAIzB,KAAKJ,MAAM8B,MAAOD,IAAKoB,EAAlCpB,GAUTmB,EAASjB,KAAKhB,EAAAC,EAAAC,cAAA,MAAImC,IAAK1B,GAAIE,IAG7B,OACEb,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aACG+B,qCAQP,OAEEjC,EAAAC,EAAAC,cAAA,WACGb,KAAKkB,MAAMC,OACVR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,OACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,SAGFH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,QAEDd,KAAKkD,qBAnGiBlC,cAAdC,EACZkC,aAAe,CACpB5B,MAAO,EACPG,MAAO,EACPI,oBAAqB,eC7BJsB,mLAEjB,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwC,EAAD,cAJyBrC,aCAjCsC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e8df2a41.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nexport default class Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n\nexport default class Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n\n    for (let y = 0; y < this.props.nrows; y ++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // flip only if coord is actually on board\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1 , x);\n    flipCell(y + 1 , x);\n\n    // win when every cell is \"false\"\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board: board, hasWon: hasWon});\n  }\n\n  makeTable() {\n    let tblBoard = [];\n\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {tblBoard}\n        </tbody>\n      </table>\n    )\n  }\n\n  /** Render game board or winning message. */\n  render() {\n    return (\n      // TODO: if the game is won, just show a winning msg & render nothing else\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\";\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}